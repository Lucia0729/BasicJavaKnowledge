
求一个数的负数的二进制 (等于正数的二进制取反加一)：
1.原码 5
    0000 0000 0000 0000 0000 0000 0000 0101 
2. 反码
    1111 1111 1111 1111 1111 1111 1111 1010
3.反码加一
    1111 1111 1111 1111 1111 1111 1111 1011
所以-5的二进制表达为1111 1111 1111 1111 1111 1111 1111 1011

将二进制转化为十进制
1.先看最左边符号位是1还是0,1为负数，0为正数
2.如果是正数，则为它本身，如果是负数，则对二进制减1求反，得出的数加上负号
	eg: 1111 1111 1111 1111 1111 1111 1110 1100
	  减1 ：1111 1111 1111 1111 1111 1111 1110 1011
	  取反：0000 0000 0000 0000 0000 0000 0001 0100 （20） 
	  加上负号： -20
算数操作符
  +,-,*,/,%,++,--
赋值运算符
  =,+=,-=,*=,/=,%=
比较运算符
  >,>=,<,<=,==,!=
逻辑运算符
 &，&&，|，||，!,^
	&与&&区别: &不管&的左边是true还是false，右边都会进行运算 ,而&&只要左边是false，右边就不会进行运算
 	|与||区别: |不管|的左边是true还是false，右边都会进行运算 ,而||只要左边是true，右边就不会进行运算
 	与（ && ) : 二真则真     true&&true=true , true&&false=false , false&&true=false , false&&false=false
  	或（ || ) : 一真则真     true||true=true , true||true=false , false||true=true , false||false=false
  	非（ ! ) :  取反	       !true=false , !false=true
 	异或（ ^ ) : 有且仅有一真 true^true=false , true^false=true , false^true=true , false^false=false
条件运算符
 ?(即三目运算符)
移位运算符

<<  左移运算符，将运算符左边的对象向左移动运算符右边指定的位数（在低位补0）

     左移( << )
		// 0000 0000 0000 0000 0000 0000 0000 0101 然后左移2位后，低位补0：//
		// 0000 0000 0000 0000 0000 0000 0001 0100 换算成10进制为20
		System.out.println(5 << 2);// 运行结果是20
  		// 1111 1111 1111 1111 1111 1111 1111 1011 
    		// 1111 1111 1111 1111 1111 1111 1110 1100
   		System.out.println(-5 << 2);// 运行结果是-20
    
>>  "有符号"右移运算 符，将运算符左边的对象向右移动运算符右边指定的位数。使用符号扩展机制，也就是说，如果值为正，则在高位补0，如果值为负，则在高位补1.
    右移( >> ) 高位补符号位
		// 0000 0000 0000 0000 0000 0000 0000 0101 然后右移2位，高位补0：
		// 0000 0000 0000 0000 0000 0000 0000 0001
		System.out.println(5 >> 2);// 运行结果是1
    		// 1111 1111 1111 1111 1111 1111 1111 1011 
    		// 1111 1111 1111 1111 1111 1111 1111 1110
    		System.out.println(-5 >> 2);// 运行结果是-2

>>>  "无符号"右移运算 符，将运算符左边的对象向右移动运算符右边指定的位数。采用0扩展机制，也就是说，无论值的正负，都在高位补0.
  无符号右移( >>> ) 
		// 0000 0000 0000 0000 0000 0000 0000 0101
    		//0000 0000 0000 0000 0000 0000 0000 0001
	  	System.out.println(5 >>>2);// 结果是1
	  	// 1111 1111 1111 1111 1111 1111 1111 1011
    		// 0011 1111 1111 1111 1111 1111 1111 1110
		System.out.println(-5 >>> 2);// 结果是1073741822

x<<y 相当于 x*2y  eg：num << 1,相当于num乘以2
x>>y 相当于x/2y   eg:num >> 1,相当于num除以2
    从计算速度上讲，移位运算要比算术运算快。
