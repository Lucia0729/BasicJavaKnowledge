二位数组   int[][] arr = new int[3][];
	
判断 :  arr		@[[L
	arr[0]		 null	(arr[0]里面没有建数组，此时arr[0]没有具体指向的数组，里面放的地址为null)	
	arr[0][0]        报错    (在arr[0]的基础上取[0] 则是在null基础上取数，所以会报空指针错误)	
	
如果加上这些     arr[0] = new int[2];
		arr[1] = new int[4];
		arr[2] = new int[3];
相当于给arr[0],arr[1],arr[2]分配了指向new int[2]，new int[4]，new int[3]的地址

各种排序算法
//两数交换的函数
public static void swap(int[] arr, int i, int j) {
	// TODO Auto-generated method stub
	int temp=arr[i];
	arr[i]=arr[j];
	arr[j]=temp;
}

1.  选择排序
  i从0开始，先拿第i位分别跟i+1，...,arr.length-1 比arr[i]大就叫唤内容，一轮下来第一位是最小的，其次i=1，i=2,...,i=arr.length-1
          

  public static void SelectSort(int[] arr){
	for(int i=0;i<arr.length-1;i++){
		for(int j=i+1;j<arr.length;j++){
			if(arr[i]>arr[j]){
				swap(arr,i,j);
			}
		}
	}
}


减少交换次数的比较
public static void SelectSort_2(int[] arr){
	for(int i=0;i<arr.length-1;i++){
		int temp = arr[i];
		int index = i;
		for(int j=i+1;j<arr.length;j++){
			if(temp>arr[j]){
				temp=arr[j];
				index=j;
			}
		}
		swap(arr,i,index);
	}
}


2.冒泡排序

public static void BubbleSort(int[] arr) {
	// TODO Auto-generated method stub
//	for(int i=0;i<arr.length-1;i++){
//		for(int j=0;j<arr.length-1-i;j++){
//			if(arr[j]>arr[j+1]){
//				swap(arr,j,j+1);
//			}
//		}
//	}
	for(int i=arr.length-1;i>0;i--){
		for(int j=i-1;j>=0;j--){
			if(arr[j]>arr[j+1]){
				swap(arr,j,j+1);
			}
		}
	}
}

3.二分查找
//二分查找
public static int find(int[] arr,int num){
	int min=0,max=arr.length-1;
	int mid = 0;
	while(min<=max){
		mid = (min+max)>>1;
		if(num>arr[mid])
			min=mid+1;
		if(num<arr[mid])
			max=mid-1;
		if(num==arr[mid]){
			return mid;
		}
	}
	 return -min-1;
}
