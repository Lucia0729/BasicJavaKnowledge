1.进入到jdk安装路径的bin目录下
    eg：C:\Java\jdk1.7.0_71\bin
    该目录下有很多应用程序，我用的是keytool.exe,这是jdk自带的生成数字证书的工具

2.keytool -genkey -alias test -keyalg RSA -keysize 1024 -keystore test.jks -validity 365
（-genkey: 在用户主目录中创建一个默认文件".keystore",还会产生一个mykey的别名，mykey中包含用户的公钥、私钥和证书 ,
-alias test：取别名为test ,
-keyalg RSA :指定生成算法为RSA ,
-keysize 1024: 指定密钥长度, 
-keystore test.jks: 指定密钥库的名称为test.jks(产生的各类信息将不在.keystore文件中），
-validity    指定创建的证书有效期多少天
）
    输入如上命令后会让你连续输入两次密钥库口令，第一次随便填，第二次要跟第一次一样。
    接下来让你输入如下信息：你的名字与姓氏?    lucia
                          你的组织单位名称?    Foxconn
                          你的组织名称?        Foxconn
                          你所在的城市?   WuHan
                          你所在的省份?   HuBei
                          你所在的国家?（CN）
    问你是否正确？输入 是
  
 3.keytool -list -v -keystore test.jks
 ( -list : 显示密钥库中的证书信息 ,
    -v : 显示密钥库中的证书详细信息)
    输入如上命令可以显示证书的详细信息
    
    
 4.keytool -alias test -exportcert -keystore test.jks -file test.cer
 (-exportcert 同 -export ： 将别名指定的证书导出到文件)
     输入如上命令可以导出证书，在bin文件下新生成了test.cer和test.jks文件，点击test.cer可以显示证书的信息，test.jks放到项目中用

系统生成步骤如下：
首先创建客户端公钥和KeyStore
keytool -genkey -alias clientprivatekey -keypass keypass -keystore Client_KeyStore.jks -storepass storepass -dname "CN=tongtech.com,C=CN" -keyalg RSA
 给私钥进行签名
keytool -selfcert -keystore Client_KeyStore.jks -storepass storepass -alias clientprivatekey -keypass keypass
 导出私钥，作用是将导出的证书作为公钥保存到TrustStore中。
keytool -export -alias clientprivatekey -file Client_PublicCert.cer -keystore Client_KeyStore.jks -storepass storepass
 然后创建服务端私钥和KeyStore
keytool -genkey -alias serverprivatekey -keypass keypass -keystore Server_KeyStore.jks -storepass storepass -dname "CN=tongtech.com,C=CN" -keyalg RSA
 用私钥进行签名
keytool -selfcert -keystore Server_KeyStore.jks -storepass storepass -alias serverprivatekey -keypass keypass
 导出私钥
keytool -export -alias serverprivatekey -file Server_PublicCert.cer -keystore Server_KeyStore.jks -storepass storepass
 接下来，将客户端公钥导入到服务端的TrustStore中，将服务端公钥导入到客户端TrustStore中
keytool -import -aliasclientpublickey -file Client_PublicCert.cer -keystore Server_TrustStore.jks -storepass storepass
 
 同理，将服务端公钥导入到客户端TrustStore中
keytool -import -alias serverpublickey -file Server_PublicCert.cer -keystore Client_TrustStore.jks -storepass storepass

可以将这些文件保存成bat文件，点击这个文件即可自动生成
最后生成六个文件： Client_KeyStore.jks, Client_PublicCert.cer, Client_TrustStore.jks
		 Server_KeyStore.jks, Server_PublicCert.cer, Server_TrustStore.jks

在webservice服务端中使用:
	<bean id="wss4jin" class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">
		<constructor-arg>
			<map>
				<entry key="action" value="UsernameToken Signature Encrypt" />
				<entry key="passwordType" value="PasswordDigest" />
				<entry key="passwordCallbackRef">
					<ref bean="passwordCallback" />
				</entry>
				<entry key="signaturePropFile" value="configs_server/server_versign.properties" />
				<entry key="decryptionPropFile" value="configs_server/server_decryption.properties" />
			</map>
		</constructor-arg>
	</bean>
<bean id="wss4jout" class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">
		<constructor-arg>
			<map>
				<entry key="action" value="UsernameToken Signature Encrypt" />
				<entry key="passwordType" value="PasswordDigest" />
				<entry key="user" value="admin" />
				<entry key="signatureUser" value="serverprivatekey" />   <!--服务端证书别名-->
				<entry key="encryptionUser" value="clientpublickey" />
				<entry key="passwordCallbackRef">
					<ref bean="passwordCallback" />
				</entry>
				<entry key="signaturePropFile" value="configs_server/server_decryption.properties" />
				<entry key="encryptionPropFile" value="configs_server/server_versign.properties" />
			</map>
		</constructor-arg>
	</bean>
    
server_versign.properties文件内容
    org.apache.ws.security.crypto.provider=org.apache.ws.security.components.crypto.Merlin
    org.apache.ws.security.crypto.merlin.keystore.type=jks
    org.apache.ws.security.crypto.merlin.keystore.password=passwd
    org.apache.ws.security.crypto.merlin.keystore.alias=clientpublickey
    org.apache.ws.security.crypto.merlin.file=configs_server/Server_TrustStore.jks
server_decryption.properties文件内容
    org.apache.ws.security.crypto.provider=org.apache.ws.security.components.crypto.Merlin
    org.apache.ws.security.crypto.merlin.keystore.type=jks
    org.apache.ws.security.crypto.merlin.keystore.password=passwd
    org.apache.ws.security.crypto.merlin.keystore.alias=serverprivatekey
    org.apache.ws.security.crypto.merlin.file=configs_server/Server_KeyStore.jks
